{
	"Console Log": {
		"prefix": "clog",
		"body": [
			"console.log('${CLIPBOARD}',${CLIPBOARD})"
		],
		"description": "Output to console"
	},
	"Console Log Color": {
		"prefix": "clogc",
		"body": [
			"console.log('%c ${CLIPBOARD}','background: black; color: yellow', ${CLIPBOARD});"
			// console.log('%c SumCertificateFeesTotal ', 'background: black; color: yellow');
			// console.log('%c SumCertificateFeesTotal ', 'background: red; color: white');
			// console.log('%c SumCertificateFeesTotal ', 'background: orange; color: blue');
		],
		"description": "Output to console"
	},
	"React Fragment Component for CaseJacket": {
		"prefix": "rfcc",
		"body": [
			"import React from 'react';",
			"import {Container} from 'reactstrap';",
			"",
			"interface ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Props {",
			"\ttitle: string;",
			"\tdisabled: boolean;",
			"}",
			"",
			"const ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/} = ({title, disabled}: ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Props) => {",
			"\t$1document.title = '${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}';",
			"\treturn (",
			"\t\t<>",
			"\t\t\t<div className='page-content'>",
			"\t\t\t<Container fluid>",
			"\t\t\t\t<div>",
			"\t\t\t\t\t<h1>${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}</h1>",
			"\t\t\t\t</div>",
			"\t\t\t</Container>",
			"\t\t\t</div>",
			"\t\t</>",
			"\t);",
			"};",
			"",
			"export default ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/};"
		],
		"description": "Create an empty React fragment component"
	},
	"TypeScript Map": {
		"prefix": "tsmap",
		"body": [
			"{${CLIPBOARD}.map((item, key) => (",
			"\t<div key={key}>",
			"\t\t{item.guid}",
			"\t</div>",
			"\t))",
			"}",
		],
		"description": "TypeScript basic map function"
	},
	"TypeScript IfElse": {
		"prefix": "tsifelse",
		"body": [
			"{isLoggedIn ? (",
			"\t<p>Yes</p>",
			"\t) : (",
			"\t<p>No</p>",
			")}",
		],
		"description": "TypeScript basic IF function"
	},
	"TypeScript If": {
		"prefix": "tsif",
		"body": [
			"{isLoggedIn && (",
			"\t<p>Yes</p>",
			"\t)",
			"}",
		],
		"description": "TypeScript basic IF function"
	},
	"UseState hook in React": {
		"prefix": "rUseState",
		"body": [
			"const [$1, set${1/(.*)/${1:/capitalize}/}] = useState($2)"
		],
		"description": "React useState hook with dynamic names and initial value"
	},
	"UseEffect on State Change": {
		"prefix": "rUseEffectState",
		"body": [
			"useEffect(() => {",
			"  console.log(\"$1 has changed to:\", $1);",
			"}, [$1]);"
		],
		"description": "React useEffect hook to log a state variable's change"
	},
	"React Combo UseState with UseEffect": {
		"prefix": "rCombo_UseStateWithUseEffect",
		"body": [
			"const [$1, set${1/(.*)/${1:/capitalize}/}] = useState($2);",
			"",
			"useEffect(() => {",
			"  console.log(\"$1 has changed to:\", $1);",
			"}, [$1]);"
		],
		"description": "React useState hook paired with a useEffect for that state"
	}
}
